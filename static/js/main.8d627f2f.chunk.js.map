{"version":3,"sources":["Api.js","serviceWorker.js","Tick.js","TableState.js","Form.js","TestState.js","index.js"],"names":["Api","state","data","fetch","then","result","json","setState","this","map","entry","index","key","Component","Boolean","window","location","hostname","match","Tick","DateTime","Date","toLocaleTimeString","refreshTime","setInterval","time","className","TableState","props","characterData","removeCharacter","rows","row","name","job","onClick","Form","handelChange","event","target","value","submitForm","handleSubmit","initialState","type","onChange","TestState","characters","filter","character","i","console","log","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8d627f2f.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nclass Api extends Component{\r\n  state={\r\n    data:[]\r\n  }\r\n\r\n  componentDidMount(){\r\n    const url ='https://en.wikipedia.org/w/api.php?action=opensearch&search=Seona+Dancing&format=json&origin=*'\r\n  \r\n    fetch(url) // new HttpRequest method\r\n    .then(result => result.json())\r\n    .then(result => {\r\n      this.setState({\r\n        data: result\r\n      })\r\n    })\r\n  }\r\n\r\n  render(){\r\n    const{data} = this.state\r\n    const result = data.map((entry,index)=>{\r\n      return <li key={index}>{entry}</li>\r\n    })\r\n    return <ul>{result}</ul>\r\n  }\r\n}\r\n\r\nexport default Api\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, {Component} from 'react';\r\n\r\nclass Tick extends Component {\r\n\r\n  state ={\r\n    DateTime: new Date().toLocaleTimeString()\r\n  }\r\n\r\n  refreshTime = () => {\r\n    this.setState({DateTime: new Date().toLocaleTimeString()}) \r\n }\r\n\r\n  render(){\r\n    setInterval(this.refreshTime,1000)\r\n    const time = this.state.DateTime\r\n\r\n    return (\r\n      <div className=\"container-clock\">\r\n        <h1>Clock</h1>\r\n        <h2>It is {time}.</h2>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Tick;","import React, {Component} from 'react';\r\n\r\nclass TableState extends Component {\r\n  render() {\r\n    const { characterData, removeCharacter} = this.props;\r\n    \r\n    const TableTitle = () =>{\r\n      return(\r\n        <thead>\r\n          <tr>\r\n            <th><h4>Characters</h4></th><th/><th />\r\n          </tr>\r\n        </thead>\r\n      )\r\n    }\r\n\r\n    const TableHeader = () => {\r\n      return (\r\n        <thead>          \r\n          <tr>\r\n            <th>Name</th>\r\n            <th>Job</th>\r\n            <th>Remove</th>\r\n          </tr>\r\n        </thead>\r\n      )\r\n    }\r\n\r\n    const TableBody = props => {\r\n      const rows = props.characterData.map((row, index) => {\r\n        return (\r\n          <tr key={index}>\r\n            <td>{row.name}</td>\r\n            <td>{row.job}</td>\r\n            <td>\r\n              <button onClick={()=>props.removeCharacter(index)}>Delete</button>\r\n            </td>\r\n          </tr>\r\n        )\r\n      })\r\n    \r\n      return <tbody>{rows}</tbody>\r\n    }\r\n\r\n    return (\r\n      <table>            \r\n        <TableTitle />\r\n        <TableHeader />\r\n        <TableBody characterData={characterData} removeCharacter={removeCharacter}/>        \r\n      </table>\r\n    )\r\n  }\r\n}\r\n\r\nexport default TableState;","import React, {Component} from 'react';\r\n\r\nclass Form extends Component{\r\n\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    this.initialState = {\r\n      name: '',\r\n      job: '',\r\n    }\r\n\r\n    this.state = this.initialState\r\n  }\r\n\r\n  handelChange = event => {\r\n    const {name, value} = event.target\r\n\r\n    this.setState({\r\n      [name]: value\r\n    })\r\n  }\r\n\r\n  submitForm = () =>{\r\n    this.props.handleSubmit(this.state) //此例中將引用自TestState\r\n    this.setState(this.initialState)\r\n  }\r\n\r\n  render(){\r\n    const{name, job} = this.state;\r\n    return(        \r\n      <form>\r\n        <h3>Input</h3>\r\n        <label>Name</label>\r\n        <input type=\"text\" name=\"name\" value={name} onChange={this.handelChange}></input>\r\n        <label>Job</label>\r\n        <input type=\"text\" name=\"job\" value={job} onChange={this.handelChange}></input>\r\n        <input type=\"button\" value=\"Submit\" onClick={this.submitForm}></input>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Form\r\n\r\n","import React, { Component } from 'react';\r\nimport TableState from './TableState';\r\nimport Form from './Form';\r\n\r\nclass TestState extends Component{\r\n  state = {\r\n    characters:[\r\n    {\r\n      name: 'Charlie',\r\n      job: 'Janitor',\r\n    },\r\n    {\r\n      name: 'Mac',\r\n      job: 'Bouncer',\r\n    },\r\n    {\r\n      name: 'Dee',\r\n      job: 'Aspring actress',\r\n    },\r\n    {\r\n      name: 'Dennis',\r\n      job: 'Bartender',\r\n    }]\r\n  }\r\n  \r\n  removeCharacter = index => {\r\n    const {characters} = this.state\r\n  \r\n    this.setState({\r\n      characters: characters.filter((character,i)=>{\r\n        return i !== index\r\n      })\r\n    })\r\n  }\r\n  \r\n  //JSX=>spread operator部分遍歷已經有的state，後方character新增一筆新資料\r\n  //更新整筆新的state\r\n  handleSubmit = character => {  \r\n    this.setState({ characters: [...this.state.characters, character] })\r\n    console.log({ characters: [...this.state.characters, character] })\r\n  }\r\n\r\n  render(){\r\n    const {characters} = this.state\r\n    return(\r\n      <div className=\"container\">\r\n        <TableState characterData={characters} removeCharacter={this.removeCharacter}/>\r\n        <Form handleSubmit={this.handleSubmit}/>\r\n      </div>\r\n    )  \r\n  }\r\n}\r\n\r\nexport default TestState;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Api from './Api';\nimport * as serviceWorker from './serviceWorker';\nimport Tick from './Tick';\nimport TestState from './TestState';\n\nReactDOM.render(<Api />, document.getElementById('Api'));\nReactDOM.render(<Tick />, document.getElementById('tick'));\nReactDOM.render(<TestState />, document.getElementById('TestState'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}